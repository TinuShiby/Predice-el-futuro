import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import matplotlib.pyplot as plt
import statsmodels.api as sm
import seaborn as sns
import os
import  statsmodels.api as sm
from statsmodels.tsa.stattools import adfuller
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from matplotlib import pyplot
import statsmodels.tsa.api as smt
from statsmodels.tsa.arima_model import ARIMA
from sklearn.metrics import mean_squared_error

df = pd.read_csv('train_csv.csv')

df.head()

df.info()

df.describe()

df.plot.line(x = 'time', y = 'feature')
plt.show()

df.drop(['id'],axis = 1,inplace = True)

plt.figure(figsize=(12,6))
plt.plot(df.index, df['feature'])
plt.title('Feature v/s Time')
plt.xlabel('Time')
plt.ylabel('Feature')
plt.grid(True)
plt.show()

decompPred = sm.tsa.seasonal_decompose(df.feature, model="additive", period=4)
decompPred.plot()
plt.show()

train = df[0:int(len(df)*0.7)] 
test = df[int(len(df)*0.7):]

time_series_train =  train['feature']
time_series_test =  test['feature']

dftest = adfuller(time_series_train)
dftest
print('DF test statistic is %3.3f' %dftest[0])
print('DF test p-value is %1.4f' %dftest[1])

plt.figure(figsize=(8, 4))
plt.plot(time_series_train.diff(periods=1))
plt.xlabel('Time')
plt.ylabel('Feature')

plt.figure(figsize=(8, 4))
plt.plot(time_series_train.diff(periods=2))
plt.xlabel('Time')
plt.ylabel('Feature')

plt.figure(figsize=(8, 4))
plt.plot(time_series_train.diff(periods=3))
plt.xlabel('Time')
plt.ylabel('Feature')

time_series_train_diff = time_series_train.diff(periods=1)
time_series_train_diff.dropna(inplace=True)

time_series_test_diff = time_series_test.diff(periods=1)
time_series_test_diff.dropna(inplace=True)

fig, axes = plt.subplots(1, 2)
fig.set_figwidth(12)
fig.set_figheight(4)
plt.xticks(range(0,30,1), rotation = 90)
smt.graphics.plot_acf(time_series_train_diff, lags=30, ax=axes[0])
smt.graphics.plot_pacf(time_series_train_diff, lags=30, ax=axes[1])
plt.tight_layout()

model = ARIMA(time_series_train_diff, order=(1,1,0)) 
fitted = model.fit()  

fc, se, conf = fitted.forecast(24, alpha=0.05) 

fc_series = pd.Series(fc, index=test.index)
lower_series = pd.Series(conf[:, 0], index=test.index)
upper_series = pd.Series(conf[:, 1], index=test.index)

plt.figure(figsize=(8,5), dpi=100)
plt.plot(time_series_train_diff, label='training')
plt.plot(time_series_test_diff, label='actual')
plt.plot(fc_series, label='forecast')
plt.fill_between(lower_series.index, lower_series, upper_series, 
                 color='k', alpha=.15)
plt.title('Forecast vs Actuals')
plt.legend(loc='upper left', fontsize=8)
plt.show()

forecast = fitted.forecast(steps=40)[0]
df_to_pred = pd.read_csv('test_csv.csv')
df_to_pred['forecast'] = forecast
df_to_pred.head()

df_to_pred.tail()
